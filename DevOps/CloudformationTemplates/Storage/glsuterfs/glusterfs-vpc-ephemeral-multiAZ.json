{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Sample Template glusterfs-vpc-ephemeral-with-subnet.template: Sample template that creates a GlusterFS solution using local ephemeral storage of the instance type selected. This template is designed for use in VPC and requires a VPC with public subnet exists before creating this stack. **WARNING** This template creates Amazon EC2 instances and VPC resources. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "SSHFrom" : {
      "Description" : "Lockdown SSH access to the NAT host (default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "VpcPrivateCIDR1" : {
      "Description" : "CIDR for new private subnet1 i.e. 10.0.2.0/24",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "10.0.2.0/24",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "VpcId" : {
      "Description" : "Id of an exisiting VPC that contains a public subnet i.e. vpc-d54ebebf",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "64",
      "AllowedPattern" : "vpc-[a-z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores.",
      "Default" : "vpc-"
    },
    "VpcPublicSubnetId" : {
      "Description" : "Id of an exisiting public VPC subnet with is part of the VpcId provided i.e. subnet-ae4ebec4",
      "Type" : "String",
      "Default" : "subnet-",
      "MinLength" : "1",
      "MaxLength" : "64",
      "AllowedPattern" : "subnet-[a-z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "NATInstanceType" : {
      "Description" : "NAT Device EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc2.8xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "GlusterInstanceType" : {
      "Description" : "Gluster Server EC2 instance type",
      "Type" : "String",
      "Default" : "m1.large",
      "AllowedValues" : [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "m3.xlarge",
        "m3.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ClusterSize" : {
      "Description" : "Number of EC2 instances to launch as part Gluster stack (multiple of 2 between 2 and 16).",
      "Type" : "Number",
      "Default" : "2",
      "AllowedValues" : [
        "2",
        "4",
        "6",
        "8",
        "10",
        "12",
        "14",
        "16"
      ]
    },
    "FSType" : {
      "Description" : "Filesystem type i.e. distrubuted or replicated",
      "Type" : "String",
      "Default" : "distributed",
      "ConstraintDescription" : "Must match one of the supported GlusterFS filesystem types(where N is a number): distrubuted, replicated-N, striped, distributed-striped-N"
    },
    "AccessFrom" : {
      "Description" : "Lockdown access to Gluster services (default is accessiable for 0.0.0.0/0)",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "VpcPrivateCIDR2" : {
      "Description" : "CIDR for new private subnet2 i.e. 10.0.3.0/24",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "10.0.3.0/24",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "VpcPrivateCIDR1AZ" : {
      "Description" : "Availability Zone for the VpcPrivateCIDR1",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "64",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores.",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*"
    },
    "VpcPrivateCIDR2AZ" : {
      "Description" : "Availability Zone for the VpcPrivateCIDR2",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "64",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores.",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*"
    }
  },
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro" : {
        "Arch" : "64"
      },
      "m1.small" : {
        "Arch" : "64"
      },
      "m1.medium" : {
        "Arch" : "64"
      },
      "m1.large" : {
        "Arch" : "64"
      },
      "m1.xlarge" : {
        "Arch" : "64"
      },
      "m2.xlarge" : {
        "Arch" : "64"
      },
      "m2.2xlarge" : {
        "Arch" : "64"
      },
      "m2.4xlarge" : {
        "Arch" : "64"
      },
      "c1.medium" : {
        "Arch" : "64"
      },
      "c1.xlarge" : {
        "Arch" : "64"
      },
      "cc1.4xlarge" : {
        "Arch" : "64Cluster"
      },
      "cc2.8xlarge" : {
        "Arch" : "64Cluster"
      },
      "hs1.8xlarge" : {
        "Arch" : "64Cluster"
      },
      "m3.xlarge" : {
        "Arch" : "64"
      },
      "m3.2xlarge" : {
        "Arch" : "64"
      }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1" : {
        "64" : "ami-1624987f",
        "64Cluster" : "ami-08249861"
      },
      "us-west-2" : {
        "64" : "ami-2a31bf1a",
        "64Cluster" : "ami-2431bf14"
      },
      "eu-west-1" : {
        "64" : "ami-c37474b7",
        "64Cluster" : "ami-d97474ad"
      },
      "us-west-1" : {
        "64" : "ami-1bf9de5e",
        "64Cluster" : "NOT_YET_SUPPORTED"
      },
      "ap-southeast-1" : {
        "64" : "ami-a6a7e7f4",
        "64Cluster" : "NOT_YET_SUPPORTED"
      },
      "ap-northeast-1" : {
        "64" : "ami-4e6cd34f",
        "64Cluster" : "NOT_YET_SUPPORTED"
      },
      "ap-southeast-2" : {
        "64" : "ami-bd990e87",
        "64Cluster" : "NOT_YET_SUPPORTED"
      },
      "sa-east-1" : {
        "64" : "ami-1e08d103",
        "64Cluster" : "NOT_YET_SUPPORTED"
      }
    },
    "AWSNATAMI" : {
      "us-east-1" : {
        "AMI" : "ami-c6699baf"
      },
      "us-west-2" : {
        "AMI" : "ami-52ff7262"
      },
      "us-west-1" : {
        "AMI" : "ami-3bcc9e7e"
      },
      "eu-west-1" : {
        "AMI" : "ami-0b5b6c7f"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-02eb9350"
      },
      "ap-northeast-1" : {
        "AMI" : "ami-14d86d15"
      },
      "sa-east-1" : {
        "AMI" : "ami-0439e619"
      }
    }
  },
  "Resources" : {
    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path" : "/",
        "Policies" : [
          {
            "PolicyName" : "root",
            "PolicyDocument" : {
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : "cloudformation:DescribeStackResource",
                  "Resource" : "*"
                },
                {
                  "Action" : "cloudwatch:PutMetricData",
                  "Effect" : "Allow",
                  "Resource" : "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RootRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "ec2.amazonaws.com"
                ]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/"
      }
    },
    "RolePolicies" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "root",
        "PolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Resource" : "*",
              "Action" : [
                "EC2:DescribeInstances",
                "EC2:DescribeInstanceStatus"
              ]
            }
          ]
        },
        "Roles" : [
          {
            "Ref" : "RootRole"
          }
        ]
      }
    },
    "RootInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [
          {
            "Ref" : "RootRole"
          }
        ]
      }
    },
    "HostKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {
          "Ref" : "CfnUser"
        }
      }
    },
    "PrivateSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {
          "Ref" : "VpcId"
        },
        "CidrBlock" : {
          "Ref" : "VpcPrivateCIDR1"
        },
        "Tags" : [
          {
            "Key" : "Application",
            "Value" : {
              "Ref" : "AWS::StackName"
            }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          }
        ],
        "AvailabilityZone" : {
          "Ref" : "VpcPrivateCIDR1AZ"
        }
      }
    },
        "GlusterSecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : {
          "Ref" : "GlusterSecurityGroup"
        },
        "GroupId" : {
          "Ref" : "GlusterSecurityGroup"
        }
      },
      "DependsOn" : "PrivateSubnet2RouteTableAssociation"
    },
    "PrivateSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {
          "Ref" : "VpcId"
        },
        "CidrBlock" : {
          "Ref" : "VpcPrivateCIDR2"
        },
        "Tags" : [
          {
            "Key" : "Application",
            "Value" : {
              "Ref" : "AWS::StackName"
            }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          }
        ],
        "AvailabilityZone" : {
          "Ref" : "VpcPrivateCIDR2AZ"
        }
      }
    },
    "PrivateSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {
          "Ref" : "PrivateSubnet2"
        },
        "RouteTableId" : {
          "Ref" : "PrivateRouteTable"
        }
      }
    },
    "PrivateSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : {
          "Ref" : "PrivateSubnet2"
        },
        "NetworkAclId" : {
          "Ref" : "PrivateNetworkAcl"
        }
      }
    },
    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {
          "Ref" : "VpcId"
        },
        "Tags" : [
          {
            "Key" : "Application",
            "Value" : {
              "Ref" : "AWS::StackName"
            }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          }
        ]
      }
    },
    "PrivateSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {
          "Ref" : "PrivateSubnet1"
        },
        "RouteTableId" : {
          "Ref" : "PrivateRouteTable"
        }
      }
    },
    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {
          "Ref" : "VpcId"
        },
        "Tags" : [
          {
            "Key" : "Application",
            "Value" : {
              "Ref" : "AWS::StackName"
            }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          }
        ]
      }
    },
    "InboundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {
          "Ref" : "PrivateNetworkAcl"
        },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {
          "From" : "0",
          "To" : "65535"
        }
      }
    },
    "OutBoundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {
          "Ref" : "PrivateNetworkAcl"
        },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {
          "From" : "0",
          "To" : "65535"
        }
      }
    },
    "PrivateSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : {
          "Ref" : "PrivateSubnet1"
        },
        "NetworkAclId" : {
          "Ref" : "PrivateNetworkAcl"
        }
      }
    },
    "NATIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : {
          "Ref" : "NATDevice"
        }
      }
    },
    "NATDevice" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : {
          "Ref" : "NATInstanceType"
        },
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "SubnetId" : {
          "Ref" : "VpcPublicSubnetId"
        },
        "SourceDestCheck" : "false",
        "ImageId" : {
          "Fn::FindInMap" : [
            "AWSNATAMI",
            {
              "Ref" : "AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroupIds" : [
          {
            "Ref" : "NATSecurityGroup"
          }
        ]
      },
      "DependsOn" : "PrivateSubnet2NetworkAclAssociation"
    },
    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access to the NAT device and HTTP-HTTPS through.",
        "VpcId" : {
          "Ref" : "VpcId"
        },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : {
              "Ref" : "VpcPrivateCIDR1"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : {
              "Ref" : "VpcPrivateCIDR1"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : {
              "Ref" : "SSHFrom"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : {
              "Ref" : "VpcPrivateCIDR2"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : {
              "Ref" : "VpcPrivateCIDR2"
            }
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },
    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "PrivateRouteTable"
        },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : {
          "Ref" : "NATDevice"
        }
      }
    },
    "GlusterFleet" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : {
          "Ref" : "GlusterLaunchConfig"
        },
        "DesiredCapacity" : {
          "Ref" : "ClusterSize"
        },
        "Tags" : [
          {
            "Key" : "tag",
            "Value" : "glusterfs",
            "PropagateAtLaunch" : "true"
          }
        ],
        "MaxSize" : {
          "Ref" : "ClusterSize"
        },
        "MinSize" : {
          "Ref" : "ClusterSize"
        },
        "VPCZoneIdentifier" : [
          {
            "Ref" : "PrivateSubnet1"
          },
          {
            "Ref" : "PrivateSubnet2"
          }
        ],
        "AvailabilityZones" : [
          {
            "Fn::GetAtt" : [
              "PrivateSubnet1",
              "AvailabilityZone"
            ]
          },
          {
            "Fn::GetAtt" : [
              "PrivateSubnet2",
              "AvailabilityZone"
            ]
          }
        ]
      },
      "DependsOn" : "GlusterSecurityGroupIngress"
    },
    "GlusterLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "xfsprogs" : [],
                "postfix" : [],
                "parted" : [],
                "nfs-utils" : []
              }
            },
            "services" : {
              "sysvinit" : {
                "postfix" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                },
                "sendmail" : {
                  "enabled" : "false",
                  "ensureRunning" : "false"
                },
                "rpcbind" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            },
            "files" : {
              "/root/cfn-setup-gluster.sh" : {
                "mode" : "000700",
                "owner" : "root",
                "group" : "root",
                "source" : "https://d3vahn1iv3ye1f.cloudfront.net/scripts/glusterfs/cfn-setup-gluster.sh"
              },
              "/etc/cfn/bash.env" : {
                "content" : {
                  "Fn::Join" : [
                    "",
                    [
                      "cfn_stack_name=",
                      {
                        "Ref" : "AWS::StackName"
                      },
                      "\n",
                      "cfn_instances=",
                      {
                        "Ref" : "ClusterSize"
                      },
                      "\n",
                      "cfn_fs_type=",
                      {
                        "Ref" : "FSType"
                      },
                      "\n",
                      "cfn_region=",
                      {
                        "Ref" : "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/usr/local/sbin/tcp-tuning.sh" : {
                "mode" : "000700",
                "owner" : "root",
                "group" : "root",
                "source" : "https://d3vahn1iv3ye1f.cloudfront.net/scripts/glusterfs/tcp-tuning.sh"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : {
          "Fn::FindInMap" : [
            "AWSRegionArch2AMI",
            {
              "Ref" : "AWS::Region"
            },
            {
              "Fn::FindInMap" : [
                "AWSInstanceType2Arch",
                {
                  "Ref" : "GlusterInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "SecurityGroups" : [
          {
            "Ref" : "GlusterSecurityGroup"
          }
        ],
        "InstanceType" : {
          "Ref" : "GlusterInstanceType"
        },
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "IamInstanceProfile" : {
          "Ref" : "RootInstanceProfile"
        },
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sdb",
            "VirtualName" : "ephemeral0"
          },
          {
            "DeviceName" : "/dev/sdc",
            "VirtualName" : "ephemeral1"
          },
          {
            "DeviceName" : "/dev/sdd",
            "VirtualName" : "ephemeral2"
          },
          {
            "DeviceName" : "/dev/sde",
            "VirtualName" : "ephemeral3"
          },
          {
            "DeviceName" : "/dev/sdf",
            "VirtualName" : "ephemeral4"
          },
          {
            "DeviceName" : "/dev/sdg",
            "VirtualName" : "ephemeral5"
          },
          {
            "DeviceName" : "/dev/sdh",
            "VirtualName" : "ephemeral6"
          },
          {
            "DeviceName" : "/dev/sdi",
            "VirtualName" : "ephemeral7"
          },
          {
            "DeviceName" : "/dev/sdj",
            "VirtualName" : "ephemeral8"
          },
          {
            "DeviceName" : "/dev/sdk",
            "VirtualName" : "ephemeral9"
          },
          {
            "DeviceName" : "/dev/sdl",
            "VirtualName" : "ephemeral10"
          },
          {
            "DeviceName" : "/dev/sdm",
            "VirtualName" : "ephemeral11"
          },
          {
            "DeviceName" : "/dev/sdn",
            "VirtualName" : "ephemeral12"
          },
          {
            "DeviceName" : "/dev/sdo",
            "VirtualName" : "ephemeral13"
          },
          {
            "DeviceName" : "/dev/sdp",
            "VirtualName" : "ephemeral14"
          },
          {
            "DeviceName" : "/dev/sdq",
            "VirtualName" : "ephemeral15"
          },
          {
            "DeviceName" : "/dev/sdr",
            "VirtualName" : "ephemeral16"
          },
          {
            "DeviceName" : "/dev/sds",
            "VirtualName" : "ephemeral17"
          },
          {
            "DeviceName" : "/dev/sdt",
            "VirtualName" : "ephemeral18"
          },
          {
            "DeviceName" : "/dev/sdu",
            "VirtualName" : "ephemeral19"
          },
          {
            "DeviceName" : "/dev/sdv",
            "VirtualName" : "ephemeral20"
          },
          {
            "DeviceName" : "/dev/sdw",
            "VirtualName" : "ephemeral21"
          },
          {
            "DeviceName" : "/dev/sdx",
            "VirtualName" : "ephemeral22"
          },
          {
            "DeviceName" : "/dev/sdy",
            "VirtualName" : "ephemeral23"
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"===============8288250434371035958==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--===============8288250434371035958==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"cloud-config.txt\"\n",
                "\n",
                "#cloud-config\n",
                "mounts:\n",
                " - [ ephemeral0, none, none ]\n",
                " - [ ephemeral1, none, none ]\n",
                " - [ ephemeral2, none, none ]\n",
                " - [ ephemeral3, none, none ]\n",
                "\n",
                "--===============8288250434371035958==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"setup.sh\"\n",
                "\n",
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Run cfn-init\n",
                "/opt/aws/bin/cfn-init --stack ",
                {
                  "Ref" : "AWS::StackName"
                },
                " --resource GlusterLaunchConfig ",
                "    --region ",
                {
                  "Ref" : "AWS::Region"
                },
                "\n",
                "# Enable network tuning\n",
                "echo -e \"/usr/local/sbin/tcp-tuning.sh\\n\" >> /etc/rc.local\n",
                "# Setup Gluster\n",
                "/root/cfn-setup-gluster.sh > /root/gluster-setup.log 2>&1\n",
                "# Signal completion\n",
                "/opt/aws/bin/cfn-signal -e $? -r \"Gluster setup done\" '",
                {
                  "Ref" : "GlusterWaitHandle"
                },
                "'\n",
                "\n",
                "--===============8288250434371035958=="
              ]
            ]
          }
        }
      }
    },
    "GlusterSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Subnet access to GlusterFS servers",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : {
              "Ref" : "AccessFrom"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "24007",
            "ToPort" : "24024",
            "CidrIp" : {
              "Ref" : "AccessFrom"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "111",
            "ToPort" : "111",
            "CidrIp" : {
              "Ref" : "AccessFrom"
            }
          },
          {
            "IpProtocol" : "udp",
            "FromPort" : "111",
            "ToPort" : "111",
            "CidrIp" : {
              "Ref" : "AccessFrom"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "38465",
            "ToPort" : "38468",
            "CidrIp" : {
              "Ref" : "AccessFrom"
            }
          }
        ],
        "VpcId" : {
          "Ref" : "VpcId"
        }
      }
    },
    "GlusterWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "GlusterWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "GlusterFleet",
      "Properties" : {
        "Handle" : {
          "Ref" : "GlusterWaitHandle"
        },
        "Timeout" : "600",
        "Count" : {
          "Ref" : "ClusterSize"
        }
      }
    }

  }
}